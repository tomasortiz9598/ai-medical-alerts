# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
from enum import Enum

import baml_py
import typing_extensions
from pydantic import BaseModel, ConfigDict

CheckT = typing_extensions.TypeVar("CheckT")
CheckName = typing_extensions.TypeVar("CheckName", bound=str)


class Check(BaseModel):
    name: str
    expression: str
    status: str


class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]


def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())


def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))


# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (3)
# #########################################################################


class AlertType(BaseModel):
    id: str
    name: str
    description: str


class MedicalAlert(BaseModel):
    type: "AlertType"
    event: str
    date: str


class Resume(BaseModel):
    name: str
    email: str
    experience: typing.List[str]
    skills: typing.List[str]


# #########################################################################
# Generated type aliases (0)
# #########################################################################
